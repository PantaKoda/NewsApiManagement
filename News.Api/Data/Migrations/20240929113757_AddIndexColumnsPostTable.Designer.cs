// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using News.Api.Context;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace News.Api.Data
{
    [DbContext(typeof(NewsDbContext))]
    [Migration("20240929113757_AddIndexColumnsPostTable")]
    partial class AddIndexColumnsPostTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("News.Api.Entities.Category", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("websiteId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("websiteId");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("News.Api.Entities.MainPageArticle", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamptz");

                    b.Property<int>("postId")
                        .HasColumnType("integer");

                    b.Property<int>("websiteId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("postId")
                        .IsUnique();

                    b.HasIndex("websiteId");

                    b.ToTable("mainPageArticles", (string)null);
                });

            modelBuilder.Entity("News.Api.Entities.Post", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("categoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("imgUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("postUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("publishDateRaw")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("publishDateUtc")
                        .HasColumnType("timestamptz");

                    b.Property<string>("timezone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("utcOffset")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("websiteId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("categoryId");

                    b.HasIndex("websiteId", "publishDateUtc")
                        .IsDescending();

                    b.ToTable("posts", (string)null);
                });

            modelBuilder.Entity("News.Api.Entities.PostTag", b =>
                {
                    b.Property<int>("postId")
                        .HasColumnType("integer");

                    b.Property<int>("tagId")
                        .HasColumnType("integer");

                    b.HasKey("postId", "tagId");

                    b.HasIndex("tagId");

                    b.ToTable("poststags", (string)null);
                });

            modelBuilder.Entity("News.Api.Entities.Tag", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("websiteId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("websiteId");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("News.Api.Entities.Website", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("websites", (string)null);
                });

            modelBuilder.Entity("News.Api.Entities.Category", b =>
                {
                    b.HasOne("News.Api.Entities.Website", "website")
                        .WithMany("categories")
                        .HasForeignKey("websiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("website");
                });

            modelBuilder.Entity("News.Api.Entities.MainPageArticle", b =>
                {
                    b.HasOne("News.Api.Entities.Post", "post")
                        .WithOne()
                        .HasForeignKey("News.Api.Entities.MainPageArticle", "postId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("News.Api.Entities.Website", "website")
                        .WithMany("mainPageArticles")
                        .HasForeignKey("websiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("post");

                    b.Navigation("website");
                });

            modelBuilder.Entity("News.Api.Entities.Post", b =>
                {
                    b.HasOne("News.Api.Entities.Category", "category")
                        .WithMany("posts")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("News.Api.Entities.Website", "website")
                        .WithMany("posts")
                        .HasForeignKey("websiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");

                    b.Navigation("website");
                });

            modelBuilder.Entity("News.Api.Entities.PostTag", b =>
                {
                    b.HasOne("News.Api.Entities.Post", "post")
                        .WithMany("postTags")
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("News.Api.Entities.Tag", "tag")
                        .WithMany("postTags")
                        .HasForeignKey("tagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("post");

                    b.Navigation("tag");
                });

            modelBuilder.Entity("News.Api.Entities.Tag", b =>
                {
                    b.HasOne("News.Api.Entities.Website", "website")
                        .WithMany("tags")
                        .HasForeignKey("websiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("website");
                });

            modelBuilder.Entity("News.Api.Entities.Category", b =>
                {
                    b.Navigation("posts");
                });

            modelBuilder.Entity("News.Api.Entities.Post", b =>
                {
                    b.Navigation("postTags");
                });

            modelBuilder.Entity("News.Api.Entities.Tag", b =>
                {
                    b.Navigation("postTags");
                });

            modelBuilder.Entity("News.Api.Entities.Website", b =>
                {
                    b.Navigation("categories");

                    b.Navigation("mainPageArticles");

                    b.Navigation("posts");

                    b.Navigation("tags");
                });
#pragma warning restore 612, 618
        }
    }
}
